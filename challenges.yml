# Services
services_refactoroutglobalcoding:
    question: |
        The newest intern, Kylo Ren, is *awesome*. Or so you thought! Until you
        see this code, which uses a `global` variable! The horror! It's up to you
        to show young Kylo a better way!
    question_steps:
        - |
          Use dependency injection to update `HappyMessageSender` and remove
          the need for the dreaded `global` keyword.
        - Update `sendHappy.php` accordingly to pass in `$emailLoader`.
        - Refresh to make sure everything still works!
    step: services-refactor-out-global
    files:
        sendHappy.php: ~
        HappyMessageSender.php: ~
        EmailAddressLoader.php:
            read_only: true
    features:
        editor: ~
        browser:
            default_uri: sendHappy.php
    grading:
        look_for_global:
            type: php
            assertFalse: inputContains("HappyMessageSender.php", "global")
            failure: Remove the `global` from `HappyMessageSender` class by passing the `$emailLoader` through the `__construct()` method.
        look_for_constructor:
            type: php
            assertTrue: reflection_class('\HappyMessageSender').hasMethod('__construct')
            failure: Be sure to add a `__construct()` method to the `HappyMessageSender` class.
        assert_num_of_required_params:
            type: php
            assertTrue: reflection_class('\HappyMessageSender').getMethod('__construct').getNumberOfRequiredParameters() == 1
            failure: Be sure you give the `__construct()` method  of `HappyMessageSender` class exactly one argument called `$emailLoader`.
        assert_parameter_name:
            type: php
            assertTrue: reflection_class('\HappyMessageSender').getMethod('__construct').getParameters()[0].getName() == 'emailLoader'
            failure: Though you can really call it anything, let's call the argument to `__construct()` method of `HappyMessageSender` class `$emailLoader` for clarity.
        look_for_text:
            type: http
            assertTrue: body() matches "/GREAT day/"
            failure: I don't see the "I hope you're having a GREAT day" message being printed!?
        look_for_email:
            type: http
            assertTrue: body() matches "/iluvhappyemails@symfony.com/"
            failure: I don't see the "iluvhappyemails@symfony.com" email being printed!?
        look_for_globals:
            type: php
            assertFalse: inputContains("sendHappy.php", "\$GLOBALS")
            failure: Get rid of the `$GLOBALS` in `sendHappy.php` - we don't need that anymore (yay!).

services_whatswrongwithglobalmc:
    question: |
        You fixed Bob's code to not use globals anymore.
        "But wait!" - he says - "What's so wrong with using
        globals? My code was a lot easier before!".
    explanation: |
        The only true statement is (B): globals makes your code difficult
        to debug, understand and maintain. When using `global $emailLoader`,
        it's not clear where this is created or who created it. And what's
        worse, in a different file, you may innocently rename or remove
        `$emailLoader` not realizing that many other parts of your code
        are relying on this being available globally!

        Writing code where you pass in needed values (dependency injection)
        takes more work. The pay-off are classes that are easier to read
        and a lot more predictable (and more unit-testable, etc).
    features:
        multiple_choice:
            choices:
                a: Globals are deprecated and are eventually going to be removed from PHP.
                b: Globals make your code difficult to debug and read. When you have `global $emailLoader`, I wonder - who set this variable? And where? What type of object is this?
                c: Globals are not as performant as using dependency injection.
                d: The `$GLOBALS` variable is available when using a web server, but *not* when running command-line tasks. This makes your code very breakable if you want to use the same code to do batch processing jobs.
            correct: b

# Injection Interfaces
injectioninterfaces_injectloggercoding:
    question: |
        When we send our happy messages, we also want to log all
        the people that we're emailing. To do that, we've created
        a new `Logger` class.
    question_steps:
        - Create a new instance of `Logger`.
        - Pass it into the `HappyMessageSender`.
        - Inside the `foreach`, log the email address of each person you're greeting.
    step: injection-interfaces-inject-logger
    files:
        sendHappy.php: ~
        HappyMessageSender.php: ~
        EmailAddressLoader.php:
            read_only: true
        Logger.php:
            read_only: true
    features:
        editor: ~
        browser:
            default_uri: sendHappy.php
    grading:
        look_for_new_logger:
            type: php
            assertTrue: inputContains('sendHappy.php', 'new Logger')
            failure: Be sure to create an instance of the `Logger` class in `sendHappy.php`
        look_for_no_global:
            type: php
            assertFalse: inputContains('HappyMessageSender.php', 'global')
            failure: Remove the `global` from `HappyMessageSender` by passing the `$emailLoader` and `$logger` through the `__construct()` function
        look_for_constructor:
            type: php
            assertTrue: class('HappyMessageSender').hasConstructor()
            failure: Be sure that a `__construct()` method in the `HappyMessageSender` is exist.
        assert_number_of_parameter:
            type: php
            assertTrue: class('HappyMessageSender').getConstructor().getNumberOfRequiredParameters() == 2
            failure: Be sure to add a `__construct()` method to `HappyMessageSender` with an `$emailLoader` as a first and `$logger` as a second required argument.
        assert_1st_parameter:
            type: php
            assertTrue: class('HappyMessageSender').getConstructor().getParameter(1).getName() == 'emailLoader'
            failure: Be sure to add a `__construct()` method to `HappyMessageSender` with an `$emailLoader` as a first and `$logger` as a second required argument.
        assert_2nd_parameter:
            type: php
            assertTrue: class('HappyMessageSender').getConstructor().getParameter(2).getName() == 'logger'
            failure: Be sure to add a `__construct()` method to `HappyMessageSender` with an `$emailLoader` as a first and `$logger` as a second required argument.
        assert_1nd_parameter_typehint:
            type: php
            assertTrue: class('HappyMessageSender').getConstructor().getParameterClass(1).getName() == 'EmailAddressLoader'
            failure: Be sure to add `EmailAddressLoader` type hint for first argument of `__construct()` method in the `HappyMessageSender` class.
        assert_2nd_parameter_typehint:
            type: php
            assertTrue: class('HappyMessageSender').getConstructor().getParameterClass(2).getName() == 'Logger'
            failure: Be sure to add `Logger` type hint for second argument of `__construct()` method in the `HappyMessageSender` class.
        look_for_log_message:
            type: php
            assertTrue: inputContains('HappyMessageSender.php', '->logMessage')
            failure: Be sure to log the email address of each person you're greeting inside the `foreach` in `HappyMessageSender::sendHappiness()`.
        look_for_text:
            type: http
            assertTrue: body() matches '/GREAT day/'
            failure: I don't see the "I hope you're having a GREAT day" message being printed!?
        look_for_email:
            type: http
            assertTrue: body() matches '/iluvhappyemails@symfony.com/'
            failure: I don't see the "iluvhappyemails@symfony.com" email being printed!?

injectioninterfaces_injectlogpathtotheloggercoding:
    question: |
        Logging, check! But now we have a problem. When we deploy
        to production, we will want to log to a different file. But
        right now the path to the log file is *hardcoded* in `Logger`.
        Let's make it more flexible!
    question_steps:
        - Give `Logger` a `__construct()` function.
        - Allow the `$logPath` to be passed in as an argument to it.
        - Set on a property (call the property `logPath`) the passed log path.
        - Update `sendHappy.php` to pass the existing `__DIR__.'/debug.log'` path into the object.
    step: injection-interfaces-inject-log-path-to-the-logger
    files:
        sendHappy.php: ~
        Logger.php: ~
        HappyMessageSender.php:
            read_only: true
        EmailAddressLoader.php:
            read_only: true
    features:
        editor: ~
        browser:
            default_uri: sendHappy.php
    grading:
        look_for_no_global:
            type: php
            assertFalse: inputContains('HappyMessageSender.php', 'global')
            failure: Remove the `global` from `HappyMessageSender` by passing the `$emailLoader` and `$logger` through the `__construct()` function
        look_for_property:
            type: php
            assertTrue: class('Logger').hasProperty('logPath')
            failure: The `logPath` property not found in the `Logger` class. Did you create it?
        assert_property_is_private:
            type: php
            assertTrue: class('Logger').getProperty('logPath').isPrivate()
            failure: Lets make a `logPath` property `private`. We *really* don't want to be able to override it outside of the `Logger` class in this case.
        look_for_constructor:
            type: php
            assertTrue: class('Logger').hasConstructor()
            failure: Seems you don't add a `__construct()` method in the `Logger` class. Lets create it!
        assert_number_of_parameter:
            type: php
            assertTrue: class('Logger').getConstructor().getNumberOfRequiredParameters() == 1
            failure: You should get a `$logPath` as a first required argument in `__construct()` method of the `Logger` class.
        assert_1st_parameter_name:
            type: php
            assertTrue: class('Logger').getConstructor().getParameter(1).getName() == 'logPath'
            failure: You should get a `$logPath` as a first required argument in `__construct()` method of the `Logger` class.
        look_for_property_usage:
            type: php
            assertTrue: inputContains('Logger.php', '$this->logPath')
            failure: Be sure to use `logPath` property in the `Logger` class.
        look_for_text:
            type: http
            assertTrue: body() matches '/GREAT day/'
            failure: I don't see the "I hope you're having a GREAT day" message being printed!?
        look_for_email:
            type: http
            assertTrue: body() matches '/iluvhappyemails@symfony.com/'
            failure: I don't see the "iluvhappyemails@symfony.com" email being printed!?

injectioninterfaces_interfacetypehintcoding:
    question: |
        Ah, new requirements! The `EmailAddressLoader` just returns
        some hardcoded emails. That's ok for now. But eventually, you're
        going to create a `DatabaseEmailAddressLoader` that will pull
        the emails from the database.

        In preparation for this, you've created a new interface called
        `EmailLoaderInterface`.
    question_steps:
        - Update `EmailLoader` to implement `EmailLoaderInterface` interface.
        - Change the type-hint in `HappyMessageSender` to allow *any* object that implements this interface.
    step: injection-interfaces-interface-type-hint
    files:
        HappyMessageSender.php: ~
        EmailAddressLoader.php: ~
        sendHappy.php:
            read_only: true
        Logger.php:
            read_only: true
        EmailLoaderInterface.php:
            read_only: true
    features:
        editor: ~
        browser:
            default_uri: sendHappy.php
    grading:
        look_for_no_global:
            type: php
            assertFalse: inputContains('HappyMessageSender.php', 'global')
            failure: Remove the `global` from `HappyMessageSender` by passing the `$emailLoader` and `$logger` through the `__construct()` function
        look_for_interface:
            type: php
            assertTrue: class('EmailAddressLoader').implementsInterface('EmailLoaderInterface')
            failure: The `EmailAddressLoader` class should implement the `EmailLoaderInterface` interface.
        look_for_constructor:
            type: php
            assertTrue: class('HappyMessageSender').hasConstructor()
            failure: Unable to find `__construct()` method in the `HappyMessageSender` class. Did you remove it?
        assert_1st_parameter_type:
            type: php
            assertTrue: class('HappyMessageSender').getConstructor().getParameterClass(1).getName() == 'EmailLoaderInterface'
            failure: You should change type hint of `$emailLoader` first required parameter to the `EmailLoaderInterface` interface in `HappyMessageSender::__construct()`.
        look_for_text:
            type: http
            assertTrue: body() matches '/GREAT day/'
            failure: I don't see the "I hope you're having a GREAT day" message being printed!?
        look_for_email:
            type: http
            assertTrue: body() matches '/iluvhappyemails@symfony.com/'
            failure: I don't see the "iluvhappyemails@symfony.com" email being printed!?

# Container
container_moveservicecreationtocontainercoding:
    question: |
        Ok, it's time to get organized! You've already installed the
        `pimple/pimple` library *and* created your `$container` variable.
        Now, add two services to it.
    question_steps:
        - Add `email_loader` service for the `EmailAddressLoader` object.
        - Add `happy_sender` service for the `HappyMessageSender` object.
        - |
          Then, simplify your code! At the bottom, get the `happy_sender` service
          out of the container instead of creating it manually.
    step: container-move-service-creation-ot-container
    files:
        sendHappy.php: ~
        EmailAddressLoader.php:
            read_only: true
        HappyMessageSender.php:
            read_only: true
        EmailLoaderInterface.php:
            read_only: true
    features:
        editor: ~
        browser:
            default_uri: sendHappy.php
    grading:
        look_for_no_global:
            type: php
            assertFalse: inputContains('HappyMessageSender.php', 'global')
            failure: Remove the `global` from `HappyMessageSender` by passing the `$emailLoader` and `$logger` through the `__construct()` function
        look_for_service_1:
            type: php
            assertTrue: inputContains('sendHappy.php', 'email_loader')
            failure: Unable to find `email_loader` service. Did you create it?
        look_for_service_2:
            type: php
            assertTrue: inputContains('sendHappy.php', 'happy_sender')
            failure: Unable to find `happy_sender` service. Did you create it?
        assert_subclass_1:
            type: php
            assertTrue: get_class(variable('container')['email_loader']) == 'EmailAddressLoader'
            failure: Seems `email_loader` service isn't an instance of the `EmailAddressLoader` class. Check your declaration of this service.
        assert_subclass_2:
            type: php
            assertTrue: get_class(variable('container')['happy_sender']) == 'HappyMessageSender'
            failure: Seems `happy_sender` service isn't an instance of the `HappyMessageSender` class. Check your declaration of this service.
        look_for_text:
            type: http
            assertTrue: body() matches '/GREAT day/'
            failure: I don't see the "I hope you're having a GREAT day" message being printed!?
        look_for_email:
            type: http
            assertTrue: body() matches '/iluvhappyemails@symfony.com/'
            failure: I don't see the "iluvhappyemails@symfony.com" email being printed!?

container_servicecreationbycontainermc:
    question: |
        Check out the following code:

        ```php
        use Pimple\Container;

        $container = new Container();
        $container['email_loader'] = function(Container $container) {
            return new EmailAddressLoader();
        };

        $loader1 = $container['email_loader'];
        $loader2 = $container['email_loader'];
        ```

        Which of the following is the most accurate?
    explanation: |
        A container gives us two awesome things:

        1. When you ask for `email_loader`, it is only ever created once
        2. The `EmailAddressLoader` is *not* created until (and unless) we ask for the `email_loader` service.
    features:
        multiple_choice:
            choices:
                a: The `$loader1` and `$loader2` objects are the exact same object in memory.
                b: |
                   The container creates 2 new `EmailAddressLoader` objects: one each time
                   we ask for the `email_loader` service.
                c: |
                   The container creates *one* `email_loader` object when the container is loaded,
                   then returns just that one object each time we ask for the `email_loader` service.
                d: |
                   The container creates *zero* `EmailAddressLoader` objects: it doesn't create them
                   until you actually call a method on the object.
            correct: a

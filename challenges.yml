services_refactoroutglobalcoding:
    question: >
        The intern (Bob) is *awesome*. Or so you thought! Until you
        see this code, which uses a `global` variable! The horror!
        Help out Bob by showing him how to correctly pass the
        `$emailRepository` object via dependency injection so that
        the dreaded `global` isn't needed!
    step: ~
    files:
        sendHappy.php: ~
        HappyMessageSender.php: ~
        EmailAddressLoader.php:
            read_only: true
    features:
        editor: ~
        browser:
            default_uri: sendHappy.php
# TODO Setup context:
#$context->requireFile('EmailAddressLoader.php');
#$context->requireFile('HappyMessageSender.php');
    grading:
        look_for_global:
            type: php
            assertFalse: input("HappyMessageSender.php") matches "/global/"
            failure: Remove the `global` from `HappyMessageSender` class by passing the `$emailLoader` through the `__construct()` method.
        look_for_constructor:
            type: php
            assertTrue: reflection_class('\HappyMessageSender').hasMethod('__construct')
            failure: Be sure to add a `__construct()` method to the `HappyMessageSender` class.
        assert_num_of_required_params:
            type: php
            assertTrue: reflection_class('\HappyMessageSender').getMethod('__construct').getNumberOfRequiredParameters() == 1
            failure: Be sure you give the `__construct()` method  of `HappyMessageSender` class exactly one argument called `$emailLoader`.
        assert_parameter_name:
            type: php
            assertTrue: reflection_class('\HappyMessageSender').getMethod('__construct').getParameters()[0]->getName() == 'emailLoader'
            failure: Though you can really call it anything, let's call the argument to `__construct()` method of `HappyMessageSender` class `$emailLoader` for clarity.
        look_for_text:
            type: http
            assertTrue: body() matches /GREAT day/
            failure: I don't see the "I hope you're having a GREAT day" message being printed!?
        look_for_email:
            type: http
            assertTrue: body() matches /iluvhappyemails@symfony.com/
            failure: I don't see the "iluvhappyemails@symfony.com" email being printed!?
        look_for_globals:
            type: php
            assertTrue: input("sendHappy.php") matches "/\$GLOBALS/"
            failure: Get rid of the `$GLOBALS` in `sendHappy.php` - we don't need that anymore (yay!).

services_whatswrongwithglobalmc:
    question: >
        You fixed Bob's code to not use globals anymore.
        "But wait!" - he says - "What's so wrong with using
        globals? My code was a lot easier before!".
    explanation: >
        The only true statement is (B): globals makes your code difficult
        to debug, understand and maintain. When using `global $emailLoader`,
        it's not clear where this is created or who created it. And what's
        worse, in a different file, you may innocently rename or remove
        `$emailLoader` not realizing that many other parts of your code
        are relying on this being available globally!

        Writing code where you pass in needed values (dependency injection)
        takes more work. The pay-off are classes that are easier to read
        and a lot more predictable (and more unit-testable, etc).
    features:
        multiple_choice:
            choices:
                a: Globals are deprecated and are eventually going to be removed from PHP.
                b: Globals make your code difficult to debug and read. When you have `global $emailLoader`, I wonder - who set this variable? And where? What type of object is this?
                c: Globals are not as performant as using dependency injection.
                d: The `$GLOBALS` variable is available when using a web server, but *not* when running command-line tasks. This makes your code very breakable if you want to use the same code to do batch processing jobs.
            correct: b
    grading: []
